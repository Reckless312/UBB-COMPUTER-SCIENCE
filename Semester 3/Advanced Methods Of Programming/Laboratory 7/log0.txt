Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 6 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
{ 6 --> Reference to type: Integer at address: 5 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
Printed: Reference to type: Ref(Integer) at address: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
Printed: Reference to type: Ref(Integer) at address: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
Printed: Reference to type: Ref(Integer) at address: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Reference to type: Integer at address: 1
Printed: Reference to type: Ref(Integer) at address: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 4
Printed: Integer: 3
Printed: Integer: 2
Printed: Integer: 1
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 2
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@7c614ea6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6a6487f6 }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(v)
v = ( v - Integer: 1 )
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 4
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
While (v > Integer: 0)Execute Print(v), v = ( v - Integer: 1 )
Print(v)
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 4 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print((Read from heap v))
Print(( (Read from heap (Read from heap a)) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v))
Write in heap: v -> Integer: 30
Print(( (Read from heap v) + Integer: 5 ))
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Print(v)
Print(a)
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Boolean: false
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Boolean: false
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number1
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer number2
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number1 = Integer: 2
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 0 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
number2 = Integer: 3
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print((number1 > number2))
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ number1 --> Integer: 2 }
{ number2 --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Boolean: false
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 6 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
{ 6 --> Reference to type: Integer at address: 5 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 20
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Ref(Integer)) a
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 0 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v -> Integer: 30
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> v
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 2 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Reference to type: Integer at address: 1 }
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) b
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: b -> Integer: 1
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 0 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> b
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 4 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Ref(Integer) at address: 6 }
{ b --> Reference to type: Integer at address: 5 }
{ v --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 3 --> Integer: 30 }
{ 4 --> Reference to type: Integer at address: 3 }
{ 5 --> Integer: 1 }
{ 6 --> Reference to type: Integer at address: 5 }
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
String varf
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
varf = String: test.in
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: NULL }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Open file: 'varf
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer varc
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Read from file: 'varf
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 15 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Print(varc)
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Close file: 'varf
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
{ String: test.in --> java.io.BufferedReader@6ef680ec }
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ varf --> String: test.in }
{ varc --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Integer v
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 10
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 22
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: a -> Integer: 30, v = Integer: 32, Print(v), Print((Read from heap a))
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: a -> Integer: 30
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 22 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
v = Integer: 32
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 10 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print(v)
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 32 }
------------------------------------------------------------------------
Out:
Printed: Integer: 10
Printed: Integer: 30
Printed: Integer: 32
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 30 }
#########################################################################
