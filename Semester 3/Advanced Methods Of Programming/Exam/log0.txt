Program id: 0
Execution Stack:
Ref(Integer) v1
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
New Semaphorecnt(Read from heap v1)Integer: 1
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), Release cnt
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 1
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 1
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 1
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Fork: AcquireStatement cnt, Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 ), Print((Read from heap v1)), Release cnt
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 1
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 1
Execution Stack:
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[1] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
AcquireStatement cnt
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 0
Execution Stack:
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 0
Execution Stack:
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 0
Execution Stack:
Print(( (Read from heap v1) - Integer: 1 ))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 0
Execution Stack:
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 0
Execution Stack:
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 2
Execution Stack:
AcquireStatement cnt
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[0] }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 200 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 200 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 200 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 2 )
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 200 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v1))
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
Printed: Integer: 400
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
Release cnt
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
Printed: Integer: 400
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[2] }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 19
Printed: Integer: 400
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 400 }
------------------------------------------------------------------------
Semaphore Table:
{ 1 --> 2 1[] }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer x
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer q
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 20
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 30
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(x)
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x), LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Unlock (x)
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
NewLockStatement(q)
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 0 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Fork: LockStatement(x), Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 ), Unlock (x)
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q), LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Unlock (q)
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) - Integer: 1 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
Fork: LockStatement(q), Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 ), Unlock (q)
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
LockStatement(x)
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 2 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 19 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Unlock (x)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 30 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Nop
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
LockStatement(q)
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(x)
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) + Integer: 5 )
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 300 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 4
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> 4 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 4
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ x --> Integer: 1 }
{ q --> Integer: 2 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v1))
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (x)
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> 0 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
LockStatement(q)
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap v2))
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Unlock (q)
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ q --> Integer: 2 }
{ x --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 190
Printed: Integer: 305
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 190 }
{ 2 --> Integer: 305 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
{ 1 --> -1 }
{ 2 --> -1 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) a
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: a -> Integer: 20
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
For v=Integer: 0; v<Integer: 3; v=( v + Integer: 1 )do Fork: Print(v), v = ( v * (Read from heap a) )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Integer v
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = Integer: 0
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 0 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 1 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 20 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Print(v), v = ( v * (Read from heap a) )
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
v = ( v + Integer: 1 )
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
While (v < Integer: 3)Execute Fork: Print(v), v = ( v * (Read from heap a) ), v = ( v + Integer: 1 )
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
Print(v)
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Print((Read from heap a))
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
v = ( v * (Read from heap a) )
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 2 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
Printed: Integer: 2
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Reference to type: Integer at address: 1 }
{ v --> Integer: 40 }
------------------------------------------------------------------------
Out:
Printed: Integer: 0
Printed: Integer: 1
Printed: Integer: 2
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v1
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v2
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Ref(Integer) v3
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer cnt
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v1 -> Integer: 2
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 0 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v2 -> Integer: 3
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 0 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Allocate in heap: v3 -> Integer: 4
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
NewLatchStatement cnt (Read from heap v2)
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 0 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
Fork: Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 ), Print((Read from heap v1)), CountDownStatement( cnt), Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Write in heap: v1 -> ( (Read from heap v1) * Integer: 10 )
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 2 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
Print((Read from heap v1))
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 1
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 3 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 1
Execution Stack:
Fork: Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 ), Print((Read from heap v2)), CountDownStatement( cnt), Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 1
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Write in heap: v2 -> ( (Read from heap v2) * Integer: 10 )
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 3 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
Print((Read from heap v2))
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 2
Execution Stack:
CountDownStatement( cnt)
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 2 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 2
Execution Stack:
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 2
Execution Stack:
Fork: Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 ), Print((Read from heap v3)), CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 2
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Write in heap: v3 -> ( (Read from heap v3) * Integer: 10 )
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 4 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
Print((Read from heap v3))
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 3
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 1 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 3
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
AwaitStatement(cnt)
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Print(Integer: 100)
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
Printed: Integer: 100
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
CountDownStatement( cnt)
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
Printed: Integer: 100
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ cnt --> Integer: 1 }
{ v1 --> Reference to type: Integer at address: 1 }
{ v2 --> Reference to type: Integer at address: 2 }
{ v3 --> Reference to type: Integer at address: 3 }
------------------------------------------------------------------------
Out:
Printed: Integer: 20
Printed: Integer: 1
Printed: Integer: 30
Printed: Integer: 2
Printed: Integer: 40
Printed: Integer: 3
Printed: Integer: 100
Printed: Integer: 0
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
{ 1 --> Integer: 20 }
{ 2 --> Integer: 30 }
{ 3 --> Integer: 40 }
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
{ 1 --> 0 }
#########################################################################
Program id: 0
Execution Stack:
Integer a
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer a
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer a
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer b
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Integer c
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
a = Integer: 1
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 0 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
b = Integer: 2
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 0 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 3
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 0 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
c = Integer: 5
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 3 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
SwitchStatement( a * Integer: 10 )( b * c )Integer: 10Print(a), Print(b)Print(Integer: 100), Print(Integer: 200)Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
If ( (( a * Integer: 10 ) == ( b * c ))) Then Print(a), Print(b) Else If ( (( a * Integer: 10 ) == Integer: 10)) Then Print(Integer: 100), Print(Integer: 200) Else Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
If ( (( a * Integer: 10 ) == ( b * c ))) Then Print(a), Print(b) Else If ( (( a * Integer: 10 ) == Integer: 10)) Then Print(Integer: 100), Print(Integer: 200) Else Print(Integer: 300)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(a)
Print(b)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(a)
Print(b)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(a)
Print(b)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(a)
Print(b)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(b)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(b)
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
Printed: Integer: 1
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
Printed: Integer: 1
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
Print(Integer: 300)
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
Printed: Integer: 1
Printed: Integer: 2
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
Program id: 0
Execution Stack:
------------------------------------------------------------------------
Symbol table:
{ a --> Integer: 1 }
{ b --> Integer: 2 }
{ c --> Integer: 5 }
------------------------------------------------------------------------
Out:
Printed: Integer: 1
Printed: Integer: 2
Printed: Integer: 300
------------------------------------------------------------------------
FileTable:
------------------------------------------------------------------------
Heap:
------------------------------------------------------------------------
Semaphore Table:
------------------------------------------------------------------------
Lock Table:
------------------------------------------------------------------------
Latch Table:
#########################################################################
