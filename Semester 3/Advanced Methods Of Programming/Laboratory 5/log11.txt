Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 30)
((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) b)
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: b -> Integer: 1)
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 30)
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) b)
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: b -> Integer: 1)
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
a --> Reference to type: Ref(Integer) at address: 6
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
6 --> Reference to type: Integer at address: 5
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 30)
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) b)
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: b -> Integer: 1)
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
a --> Reference to type: Ref(Integer) at address: 6
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
6 --> Reference to type: Integer at address: 5
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 30)
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) b)
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: b -> Integer: 1)
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
a --> Reference to type: Ref(Integer) at address: 6
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
6 --> Reference to type: Integer at address: 5
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 30)
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 2
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
1 --> Integer: 20
2 --> Reference to type: Integer at address: 1
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) b)
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: b -> Integer: 1)
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 4
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
a --> Reference to type: Ref(Integer) at address: 6
b --> Reference to type: Integer at address: 5
v --> Reference to type: Integer at address: 3
Out:
FileTable:
Heap:
3 --> Integer: 30
4 --> Reference to type: Integer at address: 3
5 --> Integer: 1
6 --> Reference to type: Integer at address: 5
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))))
Symbol table:
Out:
FileTable:
Heap:
3 --> Integer: 30
5 --> Integer: 1
6 --> Reference to type: Integer at address: 5
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
Out:
FileTable:
Heap:
3 --> Integer: 30
5 --> Integer: 1
6 --> Reference to type: Integer at address: 5
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Ref(Ref(Integer)) a), ((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))))
Symbol table:
v --> Reference to type: Integer at address: 7
Out:
FileTable:
Heap:
7 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Ref(Ref(Integer)) a)
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
v --> Reference to type: Integer at address: 7
Out:
FileTable:
Heap:
7 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 7
Out:
FileTable:
Heap:
7 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 0
v --> Reference to type: Integer at address: 7
Out:
FileTable:
Heap:
7 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 30), ((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 8
v --> Reference to type: Integer at address: 7
Out:
FileTable:
Heap:
7 --> Integer: 20
8 --> Reference to type: Integer at address: 7
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 30)
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 8
v --> Reference to type: Integer at address: 7
Out:
FileTable:
Heap:
7 --> Integer: 20
8 --> Reference to type: Integer at address: 7
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: a -> v), ((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 8
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
7 --> Integer: 20
8 --> Reference to type: Integer at address: 7
9 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> v)
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 8
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
7 --> Integer: 20
8 --> Reference to type: Integer at address: 7
9 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) b), ((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b)))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 10
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
7 --> Integer: 20
8 --> Reference to type: Integer at address: 7
9 --> Integer: 30
10 --> Reference to type: Integer at address: 9
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) b)
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 10
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
9 --> Integer: 30
10 --> Reference to type: Integer at address: 9
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: b -> Integer: 1), (Allocate in heap: a -> b))
Symbol table:
a --> Reference to type: Ref(Integer) at address: 10
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
9 --> Integer: 30
10 --> Reference to type: Integer at address: 9
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: b -> Integer: 1)
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 10
b --> Reference to type: Integer at address: 0
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
9 --> Integer: 30
10 --> Reference to type: Integer at address: 9
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: a -> b)
Symbol table:
a --> Reference to type: Ref(Integer) at address: 10
b --> Reference to type: Integer at address: 11
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
9 --> Integer: 30
10 --> Reference to type: Integer at address: 9
11 --> Integer: 1
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
a --> Reference to type: Ref(Integer) at address: 12
b --> Reference to type: Integer at address: 11
v --> Reference to type: Integer at address: 9
Out:
FileTable:
Heap:
9 --> Integer: 30
10 --> Reference to type: Integer at address: 9
11 --> Integer: 1
12 --> Reference to type: Integer at address: 11
-------------------------------------------------------------------------
