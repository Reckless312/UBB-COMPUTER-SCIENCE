Execution Stack:
((Ref(Integer) v), ((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocation for: v)
((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print((Heap Reading v)))
((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Heap writing: v)
(Print(( (Heap Reading v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocation for: v)
((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print((Heap Reading v)))
((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Heap writing: v)
(Print(( (Heap Reading v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print(( (Heap Reading v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
Integer: 35
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocation for: v), ((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocation for: v)
((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Print((Heap Reading v))), ((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print((Heap Reading v)))
((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Heap writing: v), (Print(( (Heap Reading v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Heap writing: v)
(Print(( (Heap Reading v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print(( (Heap Reading v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
Integer: 35
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 )))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print((Read from heap v)))
((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Write in heap: v -> Integer: 30)
(Print(( (Read from heap v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print(( (Read from heap v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
Integer: 35
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
((Ref(Integer) v), ((Allocate in heap: v -> Integer: 20), ((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 )))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Ref(Integer) v)
((Allocate in heap: v -> Integer: 20), ((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))))
Symbol table:
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Allocate in heap: v -> Integer: 20), ((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
(Allocate in heap: v -> Integer: 20)
((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 0
Out:
FileTable:
Heap:
-------------------------------------------------------------------------
Execution Stack:
((Print((Read from heap v))), ((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 )))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print((Read from heap v)))
((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
((Write in heap: v -> Integer: 30), (Print(( (Read from heap v) + Integer: 5 ))))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Write in heap: v -> Integer: 30)
(Print(( (Read from heap v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 20
-------------------------------------------------------------------------
Execution Stack:
(Print(( (Read from heap v) + Integer: 5 )))
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
Execution Stack:
Symbol table:
v --> Reference to type: Integer at address: 1
Out:
Integer: 20
Integer: 35
FileTable:
Heap:
1 --> Integer: 30
-------------------------------------------------------------------------
